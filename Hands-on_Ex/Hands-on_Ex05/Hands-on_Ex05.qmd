---
title: "Hands-on Exercise 5"
author: "WAN HONGLU"
date: "Feb 4, 2024"
date-modified: "last-modified"

execute: 
  eval: true
  echo: true
  warning: false
editor: visual
---

# Creating Ternary Plot with R

## Loading R packages

```{r}
pacman::p_load(plotly, ggtern, tidyverse)
```

## Importing the data

```{r}
pop_data <- read_csv("data/respopagsex2000to2018_tidy.csv") 
```

```{r}
agpop_mutated <- pop_data %>%
  mutate(`Year` = as.character(Year))%>%
  spread(AG, Population) %>%
  mutate(YOUNG = rowSums(.[4:8]))%>%
  mutate(ACTIVE = rowSums(.[9:16]))  %>%
  mutate(OLD = rowSums(.[17:21])) %>%
  mutate(TOTAL = rowSums(.[22:24])) %>%
  filter(Year == 2018)%>%
  filter(TOTAL > 0)
```

## Plotting Practice

### Plotting Ternary Diagram with R

Plotting a static ternary diagram.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
ggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point()
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
ggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point() +
  labs(title="Population structure, 2015") +
  theme_rgbw()
```

Plotting an interative ternary diagram.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
label <- function(txt) {
  list(
    text = txt, 
    x = 0.1, y = 1,
    ax = 0, ay = 0,
    xref = "paper", yref = "paper", 
    align = "center",
    font = list(family = "serif", size = 15, color = "white"),
    bgcolor = "#b3b3b3", bordercolor = "black", borderwidth = 2
  )
}

# reusable function for axis formatting
axis <- function(txt) {
  list(
    title = txt, tickformat = ".0%", tickfont = list(size = 10)
  )
}

ternaryAxes <- list(
  aaxis = axis("Young"), 
  baxis = axis("Active"), 
  caxis = axis("Old")
)

# Initiating a plotly visualization 
plot_ly(
  agpop_mutated, 
  a = ~YOUNG, 
  b = ~ACTIVE, 
  c = ~OLD, 
  color = I("black"), 
  type = "scatterternary"
) %>%
  layout(
    annotations = label("Ternary Markers"), 
    ternary = ternaryAxes
  )
```

# Visual Correlation Analysis

## Loading R packages

```{r}
pacman::p_load(corrplot, ggstatsplot, tidyverse,corrgram, ellipse, corrplot)
```

## Importing the data

```{r}
 wine <- read_csv("data/wine_quality.csv")
```

## Plotting Practice

### Building Correlation Matrix: pairs() method

Building a basic correlation matrix.

```{r}
pairs(wine[,1:11])
```

```{r}
pairs(wine[,2:12])
```

Drawing the lower corner.

```{r}
pairs(wine[,2:12], upper.panel = NULL)
```

```{r}
pairs(wine[,2:12], lower.panel = NULL)
```

Including with correlation coefficients.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y, use="complete.obs"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}

pairs(wine[,2:12], 
      upper.panel = panel.cor)
```

### Visualising Correlation Matrix: ggcormat()

### Building multiple plots

These code and plot exercises run into problems when trying to execute them simultaneously, but succeed when executed separately. So I put this set of code in [Hands-on Exercise 5 Appendix](https://whlmitbisss608.netlify.app/hands-on_ex/hands-on_ex05_appendix/hands-on_ex05_appendix).

### Visualising Correlation Matrix using corrplot Package

```{r}
wine.cor <- cor(wine[, 1:11])
corrplot(wine.cor)
```

Working with visual geometrics.

```{r}
corrplot(wine.cor, 
         method = "ellipse") 
```

Working with layout.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
corrplot(wine.cor, 
         method = "ellipse", 
         type="lower")
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
corrplot(wine.cor, 
         method = "ellipse", 
         type="lower",
         diag = FALSE,
         tl.col = "black")
```

Working with mixed layout.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

Combining corrgram with the significant test.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
wine.sig = cor.mtest(wine.cor, conf.level= .95)
corrplot(wine.cor,
         method = "number",
         type = "lower",
         diag = FALSE,
         tl.col = "black",
         tl.srt = 45,
         p.mat = wine.sig$p,
         sig.level = .05)
```

Reorder a corrgram.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               order="AOE",
               tl.col = "black")
```

Reordering a correlation matrix using hclustv.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
corrplot(wine.cor, 
         method = "ellipse", 
         tl.pos = "lt",
         tl.col = "black",
         order="hclust",
         hclust.method = "ward.D",
         addrect = 3)
```

# Heatmap for Visualising and Analysing Multivariate Data

## Loading R packages

```{r}
pacman::p_load(seriation, dendextend, heatmaply, tidyverse)
```

## Importing the data

```{r}
wh <- read_csv("data/WHData-2018.csv")

row.names(wh) <- wh$Country

wh1 <- dplyr::select(wh, c(3, 7:12))
wh_matrix <- data.matrix(wh)
```

## Plotting Practice

### Static Heatmap

heatmap() of R Stats.

```{r}
wh_heatmap <- heatmap(wh_matrix,
                      Rowv=NA, Colv=NA)
```

```{r}
wh_heatmap <- heatmap(wh_matrix)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
wh_heatmap <- heatmap(wh_matrix,
                      scale="column",
                      cexRow = 0.6, 
                      cexCol = 0.8,
                      margins = c(10, 4))
```

### Creating Interactive Heatmap

Working with heatmaply.

```{r}
heatmaply(mtcars)
```

```{r}
heatmaply(wh_matrix[, -c(1, 2, 4, 5)])
```

Data trasformation - Scaling method.

```{r}
heatmaply(wh_matrix[, -c(1, 2, 4, 5)],
          scale = "column")
```

Data trasformation - Normalising method.

```{r}
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))
```

Data trasformation - Percentising method

```{r}
heatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))
```

Manual approach.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          dist_method = "euclidean",
          hclust_method = "ward.D")
```

Statistical approach.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
wh_d <- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = "euclidean")
dend_expend(wh_d)[[3]]

wh_clust <- hclust(wh_d, method = "average")
num_k <- find_k(wh_clust)
plot(num_k)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          dist_method = "euclidean",
          hclust_method = "average",
          k_row = 3)
```

Seriation.

```{r}
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          seriate = "OLO")
```

```{r}
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          seriate = "GW")
```

```{r}
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          seriate = "mean")
```

```{r}
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          seriate = "none")
```

Working with colour palettes.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          seriate = "none",
          colors = Blues)
```

The finishing touch.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
heatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),
          Colv=NA,
          seriate = "none",
          colors = Blues,
          k_row = 5,
          margins = c(NA,200,60,NA),
          fontsize_row = 4,
          fontsize_col = 5,
          main="World Happiness Score and Variables by Country, 2018 \nDataTransformation using Normalise Method",
          xlab = "World Happiness Indicators",
          ylab = "World Countries"
          )
```

# Visual Multivariate Analysis with Parallel Coordinates Plot

## Loading R packages

```{r}
pacman::p_load(GGally, parallelPlot, tidyverse)
```

## Importing the data

```{r}
wh <- read_csv("data/WHData-2018.csv")
```

## Plotting Practice

### Plotting Static Parallel Coordinates Plot

Plotting a simple parallel coordinates.

```{r}
ggparcoord(data = wh, 
           columns = c(7:12))
```

Plotting a parallel coordinates with boxplot.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
ggparcoord(data = wh, 
           columns = c(7:12), 
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Parallel Coordinates Plot of World Happines Variables")
```

Parallel coordinates with facet.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
ggparcoord(data = wh, 
           columns = c(7:12), 
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of World Happines Variables by Region") +
  facet_wrap(~ Region)
```

Rotating x-axis text label.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
ggparcoord(data = wh, 
           columns = c(7:12), 
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of World Happines Variables by Region") +
  facet_wrap(~ Region) + 
  theme(axis.text.x = element_text(angle = 30))
```

Adjusting the rotated x-axis text label.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
ggparcoord(data = wh, 
           columns = c(7:12), 
           groupColumn = 2,
           scale = "uniminmax",
           alphaLines = 0.2,
           boxplot = TRUE, 
           title = "Multiple Parallel Coordinates Plots of World Happines Variables by Region") +
  facet_wrap(~ Region) + 
  theme(axis.text.x = element_text(angle = 30, hjust=1))
```

### Plotting Interactive Parallel Coordinates Plot: parallelPlot methods

The basic plot.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
wh <- wh %>%
  select("Happiness score", c(7:12))
parallelPlot(wh,
             width = 320,
             height = 250)
```

Rotate axis label.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
parallelPlot(wh,
             rotateTitle = TRUE)
```

Changing the colour scheme.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
parallelPlot(wh,
             continuousCS = "YlOrRd",
             rotateTitle = TRUE)
```

Parallel coordinates plot with histogram.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
histoVisibility <- rep(TRUE, ncol(wh))
parallelPlot(wh,
             rotateTitle = TRUE,
             histoVisibility = histoVisibility)
```

# Treemap Visualisation with R

## Loading R packages

```{r}
pacman::p_load(treemap, treemapify, tidyverse) 
```

## Importing the data

```{r}
realis2018 <- read_csv("data/realis2018.csv")
```

Grouped summaries without the Pipe.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
realis2018_grouped <- group_by(realis2018, `Project Name`,
                               `Planning Region`, `Planning Area`, 
                               `Property Type`, `Type of Sale`)
realis2018_summarised <- summarise(realis2018_grouped, 
                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),
                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),
                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), 
                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))
```

Grouped summaries with the pipe.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
realis2018_summarised <- realis2018 %>% 
  group_by(`Project Name`,`Planning Region`, 
           `Planning Area`, `Property Type`, 
           `Type of Sale`) %>%
  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), 
            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),
            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),
            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))
```

## Plotting Practice

### Designing Treemap with treemap Package

Designing a static treemap.

```{r}
realis2018_selected <- realis2018_summarised %>%
  filter(`Property Type` == "Condominium", `Type of Sale` == "Resale")
```

Using the basic arguments.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

Working with vColor and type arguments.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type = "value",
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

The “value” type treemap.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="value",
        palette="RdYlBu", 
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

The “manual” type treemap.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="manual",
        palette="RdYlBu", 
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="manual",
        palette="Blues", 
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

Working with algorithm argument.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="manual",
        palette="Blues", 
        algorithm = "squarified",
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

Using sortID.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
treemap(realis2018_selected,
        index=c("Planning Region", "Planning Area", "Project Name"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="manual",
        palette="Blues", 
        algorithm = "pivotSize",
        sortID = "Median Transacted Price",
        title="Resale Condominium by Planning Region and Area, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

### Designing Treemap using treemapify Package

Designing a basic treemap.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
ggplot(data=realis2018_selected, 
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`),
       layout = "scol",
       start = "bottomleft") + 
  geom_treemap() +
  scale_fill_gradient(low = "light blue", high = "blue")
```

Defining hierarchy. Group by Planning Region.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
ggplot(data=realis2018_selected, 
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`,
           subgroup = `Planning Region`),
       start = "topleft") + 
  geom_treemap()
```

Group by Planning Area.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
ggplot(data=realis2018_selected, 
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`,
           subgroup = `Planning Region`,
           subgroup2 = `Planning Area`)) + 
  geom_treemap()
```

Adding boundary line.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
ggplot(data=realis2018_selected, 
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`,
           subgroup = `Planning Region`,
           subgroup2 = `Planning Area`)) + 
  geom_treemap() +
  geom_treemap_subgroup2_border(colour = "gray40",
                                size = 2) +
  geom_treemap_subgroup_border(colour = "gray20")
```

### Designing Interactive Treemap using d3treeR

#### Loading R packages

```{r}
#install.packages("devtools")
library(devtools)
#install_github("timelyportfolio/d3treeR")
```

```{r}
library(d3treeR)
```

Designing An Interactive Treemap.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
tm <- treemap(realis2018_summarised,
        index=c("Planning Region", "Planning Area"),
        vSize="Total Unit Sold",
        vColor="Median Unit Price ($ psm)",
        type="value",
        title="Private Residential Property Sold, 2017",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

```{r}
d3tree(tm,rootname = "Singapore" )
```
