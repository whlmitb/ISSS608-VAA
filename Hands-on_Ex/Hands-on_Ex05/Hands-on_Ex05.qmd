---
title: "Hands-on Exercise 5"
author: "WAN HONGLU"
date: "Feb 4, 2024"
date-modified: "last-modified"

execute: 
  eval: true
  echo: true
  warning: false
editor: visual
---
# Creating Ternary Plot with R

## Loading R packages

```{r}
pacman::p_load(plotly, ggtern, tidyverse)
```

## Importing the data

```{r}
pop_data <- read_csv("data/respopagsex2000to2018_tidy.csv") 
```

```{r}
agpop_mutated <- pop_data %>%
  mutate(`Year` = as.character(Year))%>%
  spread(AG, Population) %>%
  mutate(YOUNG = rowSums(.[4:8]))%>%
  mutate(ACTIVE = rowSums(.[9:16]))  %>%
  mutate(OLD = rowSums(.[17:21])) %>%
  mutate(TOTAL = rowSums(.[22:24])) %>%
  filter(Year == 2018)%>%
  filter(TOTAL > 0)
```

## Plotting Practice

### Plotting Ternary Diagram with R
Plotting a static ternary diagram. 
```{r}
#| code-fold: true
#| code-summary: "Show the code"
ggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point()
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
ggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point() +
  labs(title="Population structure, 2015") +
  theme_rgbw()
```

Plotting an interative ternary diagram. 
```{r}
#| code-fold: true
#| code-summary: "Show the code"
label <- function(txt) {
  list(
    text = txt, 
    x = 0.1, y = 1,
    ax = 0, ay = 0,
    xref = "paper", yref = "paper", 
    align = "center",
    font = list(family = "serif", size = 15, color = "white"),
    bgcolor = "#b3b3b3", bordercolor = "black", borderwidth = 2
  )
}

# reusable function for axis formatting
axis <- function(txt) {
  list(
    title = txt, tickformat = ".0%", tickfont = list(size = 10)
  )
}

ternaryAxes <- list(
  aaxis = axis("Young"), 
  baxis = axis("Active"), 
  caxis = axis("Old")
)

# Initiating a plotly visualization 
plot_ly(
  agpop_mutated, 
  a = ~YOUNG, 
  b = ~ACTIVE, 
  c = ~OLD, 
  color = I("black"), 
  type = "scatterternary"
) %>%
  layout(
    annotations = label("Ternary Markers"), 
    ternary = ternaryAxes
  )
```

# Visual Correlation Analysis

## Loading R packages

```{r}
pacman::p_load(corrplot, ggstatsplot, tidyverse,corrgram, ellipse, corrplot)
```

## Importing the data

```{r}
 wine <- read_csv("data/wine_quality.csv")
```
## Plotting Practice
### Building Correlation Matrix: pairs() method
Building a basic correlation matrix. 

```{r}
pairs(wine[,1:11])
```

```{r}
pairs(wine[,2:12])
```

Drawing the lower corner. 
```{r}
pairs(wine[,2:12], upper.panel = NULL)
```

```{r}
pairs(wine[,2:12], lower.panel = NULL)
```

Including with correlation coefficients.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y, use="complete.obs"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}

pairs(wine[,2:12], 
      upper.panel = panel.cor)
```
### Visualising Correlation Matrix: ggcormat()
### Building multiple plots
There may be a problem with the installation package version and the code will not execute.

### Visualising Correlation Matrix using corrplot Package

```{r}
wine.cor <- cor(wine[, 1:11])
corrplot(wine.cor)
```

Working with visual geometrics.

```{r}
corrplot(wine.cor, 
         method = "ellipse") 
```

Working with layout.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
corrplot(wine.cor, 
         method = "ellipse", 
         type="lower")
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"
corrplot(wine.cor, 
         method = "ellipse", 
         type="lower",
         diag = FALSE,
         tl.col = "black")
```

Working with mixed layout.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

Combining corrgram with the significant test.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
wine.sig = cor.mtest(wine.cor, conf.level= .95)
corrplot(wine.cor,
         method = "number",
         type = "lower",
         diag = FALSE,
         tl.col = "black",
         tl.srt = 45,
         p.mat = wine.sig$p,
         sig.level = .05)
```

Reorder a corrgram.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               order="AOE",
               tl.col = "black")
```

Reordering a correlation matrix using hclustv.
```{r}
#| code-fold: true
#| code-summary: "Show the code"
corrplot(wine.cor, 
         method = "ellipse", 
         tl.pos = "lt",
         tl.col = "black",
         order="hclust",
         hclust.method = "ward.D",
         addrect = 3)
```


